import express from 'express';
import warehouse from '../schemas/warehouse_metadata.js';
import { roomModel } from '../schemas/room_metadata.js';
import { powerswitchModel } from '../schemas/powerswitch_metadata.js';

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Warehouse:
 *       type: object
 *       required:
 *         - warehouse_id
 *         - warehouse_name
 *         - latitude
 *         - longitude
 *         - warehouse_dimensions
 *         - energy_resource
 *         - cooling_units
 *         - sensors
 *         - userId
 *         - email
 *       properties:
 *         warehouse_id:
 *           type: string
 *           description: Unique ID for the warehouse, auto-generated by UUID
 *           example: 922d4b81-98c1-4c41-a06d-aa90b4f580d1
 *         warehouse_name:
 *           type: string
 *           description: Name of the warehouse
 *           example: Central Warehouse
 *         latitude:
 *           type: number
 *           description: Latitude coordinate of the warehouse
 *           example: 37.7749
 *         longitude:
 *           type: number
 *           description: Longitude coordinate of the warehouse
 *           example: -122.4194
 *         warehouse_dimensions:
 *           type: object
 *           description: Dimensions of the warehouse
 *           properties:
 *             length:
 *               type: number
 *               description: Length of the warehouse in meters
 *               example: 100
 *             width:
 *               type: number
 *               description: Width of the warehouse in meters
 *               example: 50
 *             height:
 *               type: number
 *               description: Height of the warehouse in meters
 *               example: 20
 *         energy_resource:
 *           type: string
 *           description: Type of energy resource used by the warehouse, e.g., Grid/Generator
 *           example: Grid
 *         cooling_units:
 *           type: number
 *           description: Number of cooling units installed in the warehouse
 *           example: 10
 *         sensors:
 *           type: number
 *           description: Number of sensors in the warehouse
 *           example: 15
 *         userId:
 *           type: string
 *           description: User ID associated with the warehouse
 *           example: 60d5f9f5b2933b2f0a5f5b5a
 *         email:
 *           type: string
 *           description: Email address of the user
 *           example: user@example.com
 */


/**
 * @swagger
 * /warehouse/addwarehouse:
 *   post:
 *     summary: Create a new warehouse
 *     tags: [Warehouse]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Warehouse'
 *     responses:
 *       201:
 *         description: Warehouse created successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Warehouse'
 *       400:
 *         description: Bad Request - Error creating warehouse. The request payload may be malformed or missing required fields.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message describing the issue
 *       409:
 *         description: Conflict - Warehouse already exists. The warehouse_id provided is already in use.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message indicating that the warehouse already exists
 * components:
 *   schemas:
 *     Warehouse:
 *       type: object
 *       required:
 *         - warehouse_id
 *         - warehouse_name
 *         - latitude
 *         - longitude
 *         - warehouse_dimensions
 *         - energy_resource
 *         - cooling_units
 *         - sensors
 *         - userId
 *         - email
 *       properties:
 *         warehouse_id:
 *           type: string
 *           description: Unique identifier for the warehouse
 *           example: c8fd49b0-7579-11ef-9e73-658fb0bea526
 *         warehouse_name:
 *           type: string
 *           description: Name of the warehouse
 *           example: Main Warehouse
 *         latitude:
 *           type: number
 *           description: Latitude of the warehouse location
 *           example: 40.7128
 *         longitude:
 *           type: number
 *           description: Longitude of the warehouse location
 *           example: -74.0060
 *         warehouse_dimensions:
 *           type: object
 *           properties:
 *             length:
 *               type: number
 *               description: Length of the warehouse
 *               example: 50
 *             width:
 *               type: number
 *               description: Width of the warehouse
 *               example: 30
 *             height:
 *               type: number
 *               description: Height of the warehouse
 *               example: 20
 *           required:
 *             - length
 *             - width
 *             - height
 *         energy_resource:
 *           type: string
 *           description: Type of energy resource used by the warehouse
 *           example: Solar
 *         cooling_units:
 *           type: number
 *           description: Number of cooling units in the warehouse
 *           example: 10
 *         sensors:
 *           type: number
 *           description: Number of sensors in the warehouse
 *           example: 15
 *         userId:
 *           type: string
 *           description: User ID associated with the warehouse
 *           example: 9a7e5c8e-72e3-45a7-b74f-d0072b0e6c54
 *         email:
 *           type: string
 *           description: Email address associated with the warehouse
 *           example: example@example.com
 */
router.post('/addwarehouse', async (req, res) => {
  try {
    const existingWarehouse = await warehouse.findOne({
      $or: [{ warehouse_id: req.body.warehouse_id }],
    });

    if (existingWarehouse) {
      return res.status(409).send({ message: 'Warehouse already exists' });
    }

    const newWarehouse = new warehouse(req.body);
    await newWarehouse.save();
    res.status(201).send(newWarehouse);
  } catch (error) {
    res.status(400).send(error);
  }
});

/**
 * @swagger
 * /warehouse/getallwarehouse:
 *   get:
 *     summary: Get all warehouses
 *     tags: [Warehouse]
 *     responses:
 *       200:
 *         description: A list of all warehouses
 *       500:
 *         description: Error retrieving warehouse data
 */

router.get('/getallwarehouse', async (req, res) => {
  try {
    const getAllWarehouse = await warehouse.find();

    if (!getAllWarehouse) {
      return res.status(404).json({ message: 'Warehouse not found' });
    }
    res.status(200).json(getAllWarehouse);
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving warehouse data', error });
  }
});


// router.get('/getallwarehouse', async (req, res) => {
//   try {
//       const getAllWarehouse = await warehouse.find(); // Fetch all warehouses

//       if (getAllWarehouse.length === 0) { // Check if there are no warehouses
//           return res.status(404).json({ message: 'No warehouses found' });
//       }

//       // Initialize arrays to hold the results
//       let warehousesWithDetails = await Promise.all(
//           getAllWarehouse.map(async (warehouse) => {
//               // Populate room data using the room_id
//               let roomsWithDetails = [];
//               if (Array.isArray(warehouse.rooms) && warehouse.rooms.length > 0) {
//                   roomsWithDetails = await Promise.all(
//                       warehouse.rooms.map(async (room) => {
//                           const roomData = await roomModel.findOne({ room_id: room.room_id }).select('room_name racks power_point slot level_slots room_id');
//                           return roomData; // Return the room details
//                       })
//                   );
//               }

//               // Populate power source data using powerSource_id
//               let powerStatusWithDetails = [];
//               if (Array.isArray(warehouse.powerSource) && warehouse.powerSource.length > 0) {
//                   powerStatusWithDetails = await Promise.all(
//                       warehouse.powerSource.map(async (power) => {
//                           const powerDetails = await powerswitchModel.findOne({ powerSource_id: power.powerSource_id }).select('powerSource_id powerSource_status power_source');
//                           return powerDetails;
//                       })
//                   );
//               }

//               // Return the warehouse data with populated rooms and power sources
//               const { rooms, powerSource, ...warehouseWithoutDetails } = warehouse.toObject(); // Convert to plain object
//               return {
//                   ...warehouseWithoutDetails,
//                   rooms: roomsWithDetails,
//                   powerStatus: powerStatusWithDetails
//               };
//           })
//       );

//       return res.status(200).json({
//           message: 'Warehouse, room, and power source details fetched successfully',
//           warehouses: warehousesWithDetails,
//       });
//   } catch (error) {
//       console.error(error); // Log the error for debugging
//       res.status(500).json({ message: 'Error retrieving warehouse data', error });
//   }
// });


/**
 * @swagger
 * /warehouse/getallwarehouse/{userId}:
 *   get:
 *     summary: Get all warehouses by user ID with pagination
 *     tags: [Warehouse]
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: string
 *         description: User ID associated with the warehouses, Example User ID c8fd49b0-7579-11ef-9e73-658fb0bea526
 *       - in: query
 *         name: page
 *         required: true
 *         schema:
 *           type: integer
 *           default: 0
 *         description: Page number for pagination (0-based index)
 *       - in: query
 *         name: pageSize
 *         required: true
 *         schema:
 *           type: integer
 *           default: 12
 *         description: Number of items per page for pagination
 *     responses:
 *       200:
 *         description: A list of warehouses for the specified user with pagination metadata
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       warehouse_id:
 *                         type: string
 *                         description: Unique identifier for the warehouse
 *                       warehouse_name:
 *                         type: string
 *                         description: Name of the warehouse
 *                       latitude:
 *                         type: number
 *                         description: Latitude of the warehouse location
 *                       longitude:
 *                         type: number
 *                         description: Longitude of the warehouse location
 *                       warehouse_dimensions:
 *                         type: object
 *                         properties:
 *                           length:
 *                             type: number
 *                             description: Length of the warehouse
 *                           width:
 *                             type: number
 *                             description: Width of the warehouse
 *                           height:
 *                             type: number
 *                             description: Height of the warehouse
 *                       energy_resource:
 *                         type: string
 *                         description: Type of energy resource used by the warehouse
 *                       cooling_units:
 *                         type: number
 *                         description: Number of cooling units in the warehouse
 *                       sensors:
 *                         type: number
 *                         description: Number of sensors in the warehouse
 *                       userId:
 *                         type: string
 *                         description: User ID associated with the warehouse
 *                       email:
 *                         type: string
 *                         description: Email address associated with the warehouse
 *                 hasNext:
 *                   type: boolean
 *                   description: Flag indicating if there are more pages available
 *                 totalElements:
 *                   type: integer
 *                   description: Total number of warehouses for the specified user
 *                 totalPages:
 *                   type: integer
 *                   description: Total number of pages available
 *       500:
 *         description: Internal server error when retrieving warehouse data
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message describing the internal server error
 *                 error:
 *                   type: object
 *                   example: Detailed error information
 *                   properties:
 *                     name:
 *                       type: string
 *                       example: Name of the error
 *                     message:
 *                       type: string
 *                       example: Detailed message of the error
 *                     stack:
 *                       type: string
 *                       example: Stack trace of the error
 */

router.get('/getallwarehouse/:userId', async (req, res) => {
  try {
    const { userId } = req.params;

    const page = parseInt(req.query.page) || 0;
    const pageSize = parseInt(req.query.pageSize) ||  12;
    console.log(page, pageSize);

    // Calculate the skip value (how many records to skip)
    const skip = page * pageSize;

    // Get the total count of warehouses for the user (for pagination metadata)
    const totalElements = await warehouse.countDocuments({ userId });

    // Calculate totalPages and check if the requested page is out of range
    const totalPages = Math.ceil(totalElements / pageSize);

    // If the requested page is out of range, return empty data
    if (page >= totalPages) {
      return res.status(200).json({
        data: [],
        hasNext: false,
        totalElements,
        totalPages,
      });
    }

    // Get the paginated warehouses
    const getAllWarehouse = await warehouse
      .find({ userId })
      .skip(skip)
      .limit(pageSize);

    // Check if there is a next page
    const hasNext = page < totalPages - 1;

    // Respond with warehouses, pagination metadata, and hasNext flag
    res.status(200).json({
      data: getAllWarehouse,
      hasNext,
      totalElements,
      totalPages,
    });
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving warehouse data', error });
  }
});



// /**
//  * @swagger
//  * /warehouse/getwarehouse/{warehouse_id}:
//  *   get:
//  *     summary: Get warehouse by warehouse ID
//  *     tags: [Warehouse]
//  *     parameters:
//  *       - in: path
//  *         name: warehouse_id
//  *         required: true
//  *         schema:
//  *           type: string
//  *         description: Warehouse ID
//  *     responses:
//  *       200:
//  *         description: A warehouse object
//  *       404:
//  *         description: Warehouse not found
//  *       500:
//  *         description: Error retrieving warehouse data
//  */
router.get('/getwarehouse/:warehouse_id', async (req, res) => {
  try {
    const { warehouse_id } = req.params;
    console.log(warehouse_id);
    const getWarehouse = await warehouse.findOne({ warehouse_id });

    if (!getWarehouse) {
      return res.status(404).json({ message: 'Warehouse not found' });
    }
    res.status(200).json(getWarehouse);
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving warehouse data', error });
  }
});

/**
 * @swagger
 * /warehouse/deletewarehouse/{warehouse_id}:
 *   delete:
 *     summary: Delete a warehouse by its ID
 *     tags: [Warehouse]
 *     parameters:
 *       - in: path
 *         name: warehouse_id
 *         required: true
 *         schema:
 *           type: string
 *         description: Unique identifier of the warehouse to be deleted
 *     responses:
 *       200:
 *         description: Warehouse deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Confirmation message indicating successful deletion of the warehouse
 *       204:
 *         description: Warehouse not found. No content to return.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Message indicating that the warehouse was not found
 *       500:
 *         description: Internal server error while attempting to delete the warehouse
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message describing the issue
 *                 error:
 *                   type: object
 *                   example: Detailed error information
 *                   properties:
 *                     name:
 *                       type: string
 *                       example: Name of the error
 *                     message:
 *                       type: string
 *                       example: Detailed message of the error
 *                     stack:
 *                       type: string
 *                       example: Stack trace of the error
 */

router.delete('/deletewarehouse/:warehouse_id', async (req, res) => {
  try {
    const { warehouse_id } = req.params;
    const result = await warehouse.findOneAndDelete({ warehouse_id });

    if (!result) {
      return res.status(204).send({ message: 'Warehouse not found' });
    }

    res.status(200).send({ message: 'Warehouse deleted successfully' });
  } catch (error) {
    res.status(500).send({ message: 'Error deleting warehouse', error });
  }
});

/**
 * @swagger
 * /warehouse/updatewarehouse/{warehouse_id}:
 *   put:
 *     summary: Update a warehouse by its ID
 *     tags: [Warehouse]
 *     parameters:
 *       - in: path
 *         name: warehouse_id
 *         required: true
 *         schema:
 *           type: string
 *         description: Unique identifier of the warehouse to be updated
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               warehouse_id:
 *                 type: string
 *                 description: Unique identifier of the warehouse
 *               warehouse_name:
 *                 type: string
 *                 description: Name of the warehouse
 *               latitude:
 *                 type: number
 *                 format: float
 *                 description: Latitude coordinate of the warehouse
 *               longitude:
 *                 type: number
 *                 format: float
 *                 description: Longitude coordinate of the warehouse
 *               warehouse_dimensions:
 *                 type: object
 *                 properties:
 *                   length:
 *                     type: number
 *                     format: float
 *                     description: Length of the warehouse
 *                   width:
 *                     type: number
 *                     format: float
 *                     description: Width of the warehouse
 *                   height:
 *                     type: number
 *                     format: float
 *                     description: Height of the warehouse
 *               energy_resource:
 *                 type: string
 *                 description: Energy resource used by the warehouse
 *               cooling_units:
 *                 type: number
 *                 description: Number of cooling units in the warehouse
 *               sensors:
 *                 type: number
 *                 description: Number of sensors in the warehouse
 *               userId:
 *                 type: string
 *                 description: User ID associated with the warehouse
 *               email:
 *                 type: string
 *                 description: Email associated with the warehouse
 *     responses:
 *       200:
 *         description: Warehouse updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 warehouse_id:
 *                   type: string
 *                   description: Unique identifier of the warehouse
 *                 warehouse_name:
 *                   type: string
 *                   description: Name of the warehouse
 *                 latitude:
 *                   type: number
 *                   format: float
 *                   description: Latitude coordinate of the warehouse
 *                 longitude:
 *                   type: number
 *                   format: float
 *                   description: Longitude coordinate of the warehouse
 *                 warehouse_dimensions:
 *                   type: object
 *                   properties:
 *                     length:
 *                       type: number
 *                       format: float
 *                       description: Length of the warehouse
 *                     width:
 *                       type: number
 *                       format: float
 *                       description: Width of the warehouse
 *                     height:
 *                       type: number
 *                       format: float
 *                       description: Height of the warehouse
 *                 energy_resource:
 *                   type: string
 *                   description: Energy resource used by the warehouse
 *                 cooling_units:
 *                   type: number
 *                   description: Number of cooling units in the warehouse
 *                 sensors:
 *                   type: number
 *                   description: Number of sensors in the warehouse
 *                 userId:
 *                   type: string
 *                   example: User ID associated with the warehouse
 *                 email:
 *                   type: string
 *                   example: Email associated with the warehouse
 *       204:
 *         description: Warehouse not found. No content to return.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Message indicating that the warehouse was not found
 *       500:
 *         description: Internal server error while attempting to update the warehouse
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message describing the issue
 *                 error:
 *                   type: object
 *                   example: Detailed error information
 *                   properties:
 *                     name:
 *                       type: string
 *                       example: Name of the error
 *                     message:
 *                       type: string
 *                       example: Detailed message of the error
 *                     stack:
 *                       type: string
 *                       example: Stack trace of the error
 */

// Update a warehouse by warehouse_id
router.put('/updatewarehouse/:warehouse_id', async (req, res) => {
  try {
    const { warehouse_id } = req.params;
    const updateData = req.body;

    // Find the warehouse by warehouse_id and update it
    const updatedWarehouse = await warehouse.findOneAndUpdate(
      { warehouse_id },
      updateData,
      { new: true } // Return the updated document
    );

    if (!updatedWarehouse) {
      return res.status(204).json({ message: 'Warehouse not found' });
    }

    res.status(200).json(updatedWarehouse);
  } catch (error) {
    console.error('Error updating warehouse:', error);
    res.status(500).json({ message: 'Internal Server Error', error });
  }
});

router.put('/updatewarehousetest/:warehouseId', async (req, res) => {
  try {
    const { warehouseId } = req.params;
    const updatedData = req.body;

    // Find the warehouse by warehouseId and update it
    const updatedWarehouse = await warehouseModel.findOneAndUpdate(
      { warehouse_id: warehouseId }, // Match the warehouseId
      { $set: updatedData }, // Update the fields from the request body
      { new: true } // Return the updated warehouse document
    );

    if (!updatedWarehouse) {
      return res.status(404).json({ message: 'Warehouse not found' });
    }

    res.status(200).json({
      message: 'Warehouse updated successfully',
      warehouse: updatedWarehouse
    });
  } catch (error) {
    res.status(500).json({ message: 'Error updating warehouse', error });
  }
});

export default router;
