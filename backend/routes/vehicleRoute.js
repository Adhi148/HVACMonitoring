import express from 'express';
import vehicle from '../schemas/vehicle_metadata.js'; // Ensure the path and extension are correct

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Vehicle:
 *       type: object
 *       required:
 *         - vehicle_id
 *         - vehicle_number
 *         - userId
 *       properties:
 *         vehicle_id:
 *           type: string
 *           description: Unique ID for the vehicle
 *         vehicle_number:
 *           type: string
 *           description: Number of the vehicle
 *         userId:
 *           type: string
 *           description: User ID associated with the vehicle
 *         cooling_units:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               coolant:
 *                 type: string
 *                 description: ID of the associated coolant
 *         sensors:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               sensor:
 *                 type: string
 *                 description: ID of the associated sensor
 */

/**
 * @swagger
 * /vehicle/addvehicle:
 *   post:
 *     summary: Create a new vehicle
 *     tags: [Vehicle]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               vehicle_id:
 *                 type: string
 *                 description: Unique identifier for the vehicle, generated by UUID v4
 *               vehicle_number:
 *                 type: string
 *                 description: Vehicle registration number
 *               vehicle_name:
 *                 type: string
 *                 description: Name of the vehicle
 *               vehicle_dimensions:
 *                 type: object
 *                 properties:
 *                   length:
 *                     type: number
 *                     format: float
 *                     description: Length of the vehicle in meters
 *                   width:
 *                     type: number
 *                     format: float
 *                     description: Width of the vehicle in meters
 *                   height:
 *                     type: number
 *                     format: float
 *                     description: Height of the vehicle in meters
 *                 required:
 *                   - length
 *                   - width
 *                   - height
 *               driver_details:
 *                 type: object
 *                 properties:
 *                   driver_name:
 *                     type: string
 *                     description: Name of the vehicle driver
 *                   driver_contact_no:
 *                     type: integer
 *                     description: Contact number of the vehicle driver
 *                   licence_id:
 *                     type: string
 *                     description: Driving license ID of the driver
 *                 required:
 *                   - driver_name
 *                   - driver_contact_no
 *                   - licence_id
 *               cooling_units:
 *                 type: number
 *                 description: Number of cooling units in the vehicle
 *               sensors:
 *                 type: number
 *                 description: Number of sensors in the vehicle
 *               userId:
 *                 type: string
 *                 description: User ID associated with the vehicle
 *               email:
 *                 type: string
 *                 description: Email address associated with the vehicle
 *             required:
 *               - vehicle_id
 *               - vehicle_number
 *               - vehicle_name
 *               - vehicle_dimensions
 *               - driver_details
 *               - cooling_units
 *               - sensors
 *               - userId
 *               - email
 *     responses:
 *       201:
 *         description: Vehicle created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 vehicle_id:
 *                   type: string
 *                   description: Unique identifier for the vehicle
 *                 vehicle_number:
 *                   type: string
 *                   description: Vehicle registration number
 *                 vehicle_name:
 *                   type: string
 *                   description: Name of the vehicle
 *                 vehicle_dimensions:
 *                   type: object
 *                   properties:
 *                     length:
 *                       type: number
 *                       format: float
 *                       description: Length of the vehicle in meters
 *                     width:
 *                       type: number
 *                       format: float
 *                       description: Width of the vehicle in meters
 *                     height:
 *                       type: number
 *                       format: float
 *                       description: Height of the vehicle in meters
 *                 driver_details:
 *                   type: object
 *                   properties:
 *                     driver_name:
 *                       type: string
 *                       description: Name of the vehicle driver
 *                     driver_contact_no:
 *                       type: integer
 *                       description: Contact number of the vehicle driver
 *                     licence_id:
 *                       type: string
 *                       description: Driving license ID of the driver
 *                 cooling_units:
 *                   type: number
 *                   description: Number of cooling units in the vehicle
 *                 sensors:
 *                   type: number
 *                   description: Number of sensors in the vehicle
 *                 userId:
 *                   type: string
 *                   description: User ID associated with the vehicle
 *                 email:
 *                   type: string
 *                   description: Email address associated with the vehicle
 *       400:
 *         description: Bad Request - Error creating vehicle. The request payload may be malformed or missing required fields.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message describing the issue
 *       409:
 *         description: Conflict - Vehicle already exists. The vehicle_id or vehicle_number provided is already in use.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message indicating that the vehicle already exists
 */
router.post('/addvehicle', async (req, res) => {
  try {
    const existingVehicle = await vehicle.findOne({
      $or: [
        { vehicle_id: req.body.vehicle_id },
        { vehicle_number: req.body.vehicle_number },
      ],
    });

    if (existingVehicle) {
      return res.status(409).send({ message: 'Vehicle already exists' });
    }

    const newvehicle = new vehicle(req.body);
    await newvehicle.save();
    res.status(201).send(newvehicle);
  } catch (error) {
    res.status(400).send(error);
  }
});

/**
 * @swagger
 * /vehicle/getallvehicle:
 *   get:
 *     summary: Get all vehicles
 *     tags: [Vehicle]
 *     responses:
 *       200:
 *         description: A list of all vehicles
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Vehicle'
 *       404:
 *         description: Vehicles not found
 *       400:
 *         description: Error retrieving vehicles
 */
router.get('/getallvehicle', async (req, res) => {
  try {
    const getallvehicle = await vehicle.find();

    if (!getallvehicle) {
      return res.status(404).json({ message: 'Vehicles not found' });
    }
    res.status(200).json(getallvehicle);
  } catch (error) {
    res.status(400).send(error);
  }
});


/**
 * @swagger
 * /vehicle/getallvehicle/{userId}:
 *   get:
 *     summary: Get all vehicles by user ID with pagination
 *     tags: [Vehicle]
 *     description: |
 *       Returns a list of vehicles associated with the specified user. 
 *       The response is paginated, allowing you to specify the page number and the number of vehicles per page.
 *       Available for users with 'TENANT_USER' authority.
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: string
 *         description: The User ID to retrieve vehicles.
 *                      Example User ID "c8fd49b0-7579-11ef-9e73-658fb0bea526".
 *       - in: query
 *         name: page
 *         required: true
 *         schema:
 *           type: integer
 *           default: 0
 *         description: The page number starting from 0.
 *       - in: query
 *         name: pageSize
 *         required: true
 *         schema:
 *           type: integer
 *           default: 12
 *         description: The number of vehicles to display per page (default is 12).
 *     responses:
 *       200:
 *         description: A list of vehicles with pagination metadata.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Vehicle'
 *                 hasNext:
 *                   type: boolean
 *                   description: Indicates if there is another page of vehicles.
 *                 totalElements:
 *                   type: integer
 *                   description: Total number of vehicles for the user.
 *                 totalPages:
 *                   type: integer
 *                   description: Total number of pages based on page size.
 *       500:
 *         description: Error retrieving vehicle data.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: 'Error retrieving vehicle data.'
 */
router.get('/getallvehicle/:userId', async (req, res) => {
  try {
    const { userId } = req.params;

    // Get the page and pageSize from the request body, defaulting to 0 and 12 respectively
    const page = parseInt(req.query.page) || 0;
    const pageSize = parseInt(req.query.pageSize) ||  12;

    // Calculate the skip value (how many records to skip)
    const skip = page * pageSize;

    // Get the total count of vehicles for the user (for pagination metadata)
    const totalElements = await vehicle.countDocuments({ userId });

    // Calculate totalPages and check if the requested page is out of range
    const totalPages = Math.ceil(totalElements / pageSize);

    // If the requested page is out of range, return empty data
    if (page >= totalPages) {
      return res.status(200).json({
        data: [],
        hasNext: false,
        totalElements,
        totalPages
      });
    }

    // Get the paginated vehicles
    const getAllVehicle = await vehicle
      .find({ userId })
      .skip(skip)
      .limit(pageSize);

    // Check if there is a next page
    const hasNext = page < totalPages - 1;

    // Respond with vehicles, pagination metadata, and hasNext flag
    res.status(200).json({
      data: getAllVehicle,
      hasNext,
      totalElements,
      totalPages
    });
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving vehicle data', error });
  }
});


// /**
//  * @swagger
//  * /vehicle/getbyvehicleid/{vehicle_id}:
//  *   get:
//  *     summary: Get vehicle by vehicle ID
//  *     tags: [Vehicle]
//  *     parameters:
//  *       - in: path
//  *         name: vehicle_id
//  *         required: true
//  *         schema:
//  *           type: string
//  *         description: Vehicle ID
//  *     responses:
//  *       200:
//  *         description: Vehicle data retrieved successfully
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Vehicle'
//  *       404:
//  *         description: Vehicle not found
//  *       500:
//  *         description: Internal Server Error
//  */
router.get('/getbyvehicleid/:vehicle_id', async (req, res) => {
  try {
    const { vehicle_id } = req.params;
    const vehicleData = await vehicle
      .findOne({ vehicle_id })
      .populate({
        path: 'cooling_units.coolant',
        select: 'coolant_id location_in vehicle',
      })
      .populate({
        path: 'sensors.sensor',
        select: 'sensor_id indoor_location Type date_of_installation',
      })
      .exec();

    if (!vehicleData) {
      return res.status(204).json({ message: 'Vehicle not found' });
    }

    res.json(vehicleData);
  } catch (error) {
    console.error('Error fetching vehicle:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

/**
 * @swagger
 * /vehicle/deletevehicle/{vehicle_id}:
 *   delete:
 *     summary: Delete a vehicle by ID 
 *     tags: [Vehicle]
 *     parameters:
 *       - name: vehicle_id
 *         in: path
 *         required: true
 *         description: Unique identifier for the vehicle to be deleted , Example User ID c8fd49b0-7579-11ef-9e73-658fb0bea526
 *         schema:
 *           type: string
 *           example: Enter User ID
 *     responses:
 *       200:
 *         description: Vehicle deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Success message confirming deletion
 *       204:
 *         description: No Content - Vehicle not found. The specified vehicle_id does not exist.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Message indicating that the vehicle was not found
 *       400:
 *         description: Bad Request - Error deleting vehicle. The request payload may be malformed or the request could not be processed.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message describing the issue
 */
router.delete('/deletevehicle/:vehicle_id', async (req, res) => {
  try {
    const { vehicle_id } = req.params;

    const result = await vehicle.findOneAndDelete({ vehicle_id });

    if (!result) {
      return res.status(204).send({ message: 'Vehicle not found' });
    }
    res.status(200).send({ message: 'Vehicle deleted successfully' });
  } catch (error) {
    res.status(400).send(error);
  }
});


/**
 * @swagger
 * /vehicle/updatevehicle/{vehicle_id}:
 *   put:
 *     summary: Update a vehicle by ID
 *     tags: [Vehicle]
 *     parameters:
 *       - name: vehicle_id
 *         in: path
 *         required: true
 *         description: Unique identifier for the vehicle to be updated, Example Vehicle ID fdb246f9-b03f-4634-a846-98b5e09f811b
 *         schema:
 *           type: string
 *           example: Enter Vehicle ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               vehicle_id:
 *                 type: string
 *                 description: Unique identifier for the vehicle
 *                 example: fdb246f9-b03f-4634-a846-98b5e09f811b
 *               vehicle_number:
 *                 type: string
 *                 description: Vehicle registration number
 *                 example: ABC1234
 *               vehicle_name:
 *                 type: string
 *                 description: Name of the vehicle
 *                 example: Truck A
 *               vehicle_dimensions:
 *                 type: object
 *                 properties:
 *                   length:
 *                     type: number
 *                     description: Length of the vehicle
 *                     example: 12.5
 *                   width:
 *                     type: number
 *                     description: Width of the vehicle
 *                     example: 2.5
 *                   height:
 *                     type: number
 *                     description: Height of the vehicle
 *                     example: 3.0
 *                 required:
 *                   - length
 *                   - width
 *                   - height
 *               driver_details:
 *                 type: object
 *                 properties:
 *                   driver_name:
 *                     type: string
 *                     description: Name of the driver
 *                     example: John Doe
 *                   driver_contact_no:
 *                     type: number
 *                     description: Contact number of the driver
 *                     example: 1234567890
 *                   licence_id:
 *                     type: string
 *                     description: Driver's license ID
 *                     example: D1234567
 *                 required:
 *                   - driver_name
 *                   - driver_contact_no
 *                   - licence_id
 *               cooling_units:
 *                 type: number
 *                 description: Number of cooling units in the vehicle
 *                 example: 3
 *               sensors:
 *                 type: number
 *                 description: Number of sensors in the vehicle
 *                 example: 5
 *               userId:
 *                 type: string
 *                 description: User ID associated with the vehicle
 *                 example: 9a7e5c8e-72e3-45a7-b74f-d0072b0e6c54
 *               email:
 *                 type: string
 *                 description: Email address associated with the vehicle
 *                 example: example@example.com
 *             required:
 *               - vehicle_id
 *               - vehicle_number
 *               - vehicle_name
 *               - vehicle_dimensions
 *               - driver_details
 *               - cooling_units
 *               - sensors
 *               - userId
 *               - email
 *     responses:
 *       200:
 *         description: Vehicle updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 vehicle_id:
 *                   type: string
 *                   description: Unique identifier for the vehicle
 *                 vehicle_number:
 *                   type: string
 *                   description: Vehicle registration number
 *                 vehicle_name:
 *                   type: string
 *                   description: Name of the vehicle
 *                 vehicle_dimensions:
 *                   type: object
 *                   properties:
 *                     length:
 *                       type: number
 *                       description: Length of the vehicle
 *                     width:
 *                       type: number
 *                       description: Width of the vehicle
 *                     height:
 *                       type: number
 *                       description: Height of the vehicle
 *                 driver_details:
 *                   type: object
 *                   properties:
 *                     driver_name:
 *                       type: string
 *                       description: Name of the driver
 *                     driver_contact_no:
 *                       type: number
 *                       description: Contact number of the driver
 *                     licence_id:
 *                       type: string
 *                       description: Driver's license ID
 *                 cooling_units:
 *                   type: number
 *                   description: Number of cooling units in the vehicle
 *                 sensors:
 *                   type: number
 *                   description: Number of sensors in the vehicle
 *                 userId:
 *                   type: string
 *                   description: User ID associated with the vehicle
 *                 email:
 *                   type: string
 *                   description: Email address associated with the vehicle
 *       204:
 *         description: No Content - Vehicle not found. The specified vehicle_id does not match any existing records.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Message indicating that the vehicle was not found
 *       500:
 *         description: Internal Server Error - An error occurred while processing the request.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Error message describing the issue
 *                 error:
 *                   type: string
 *                   example: Detailed error message
 */

// Update a vehicle by vehicle_id
router.put('/updatevehicle/:vehicle_id', async (req, res) => {
  try {
    const { vehicle_id } = req.params;
    const updateData = req.body;

    // Find the vehicle by vehicle_id and update it
    const updatedVehicle = await vehicle.findOneAndUpdate(
      { vehicle_id },
      updateData,
      { new: true } // Return the updated document
    );

    if (!updatedVehicle) {
      return res.status(204).json({ message: 'vehicle not found' });
    }

    res.status(200).json(updatedVehicle);
  } catch (error) {
    console.error('Error updating vehicle:', error);
    res.status(500).json({ message: 'Internal Server Error', error });
  }
});

export default router;
